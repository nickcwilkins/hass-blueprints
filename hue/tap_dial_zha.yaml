blueprint:
  name: Philips Tap Dial Switch ZHA
  description: |
    A highly configurable automation blueprint for controlling the four button Philips Hue Tap Dial Switch via Zigbee Home Automation

    By default, the automation will perform actions similar to the Philips Hue app. Each button press type has an associated input that can be overridden to perform arbitrary non-light related actions.
  domain: automation
  homeassistant:
    min_version: 2024.11.0
  input:
    remote:
      name: Philips Hue Tap Switch
      selector:
        device:
          filter:
            integration: zha
            manufacturer: Signify Netherlands B.V.
            model: RDM002
          multiple: false

    dim_scale:
      name: Dimming Scale
      description:
        A multiplier applied to the value received from the button to either slow or quicken dimming.
      default: 1.0
      selector:
        number:
          min: 0.1
          max: 3.0
          step: 0.05
          mode: slider
    first_press_behavior:
      name: First Press Behavior
      description: |
        Alter the behavior of what happens when a button is pressed the first time

        toggle - Toggles the state of the lights
        turn_on - Turns the lights on
        scene - Turn on the first scene
      default: toggle
      selector:
        select:
          options:
            - toggle
            - turn_on
            - scene
#region FIRST BUTTON INPUT
    first_button:
      name: First Button
      description: Configuration for the first button on the Philips Hue Tap Switch
      input:
        first_button_lights: &input_button_lights
          name: Lights
          description: The light(s) controlled by the first button
          default: []
          selector:
            entity:
              filter:
                domain: light
              multiple: true
        first_button_allow_dimming: &input_allow_dimming
          name: Allow Dimming
          description: Whether or not the dial will control the brightness of these lights while turned on
          default: true
          selector:
            boolean:

        first_button_scenes: &input_scenes
          name: Scenes
          description: Optional scenes to cycle through when pressing the button multiple times, up to a maximum of five. If "First Press Behavior" is not "scene", then only the first four are used.
          default: []
          selector:
            entity:
              multiple: true
              filter:
                domain: scene
    
    first_button_press_actions:
      name: First Button Press Actions
      description: Advanced configuration for actions to perform when the button is pressed, double pressed, triple pressed, etc.
      collapsed: true
      input:
        first_button_single_press: &input_single_press
          name: Single Press
          description: Actions to perform when the button is pressed once
          selector:
            action: {}
          default:
            - choose:
                - conditions:
                    - condition: template
                      value_template: "{{ first_press_behavior == 'toggle' }}"
                      alias: If first press behavior is "toggle"
                  alias: Toggle
                  sequence:
                    - if:
                      - condition: template
                        value_template: "{{ 'off' in lights | map('states', 'off') }}"
                        alias: Any lights are off
                      then:
                        - action: light.turn_on
                          metadata: {}
                          data: {}
                          target:
                            entity_id: "{{ lights }}"
                      else:
                        - action: light.turn_off
                          metadata: {}
                          data: {}
                          target:
                            entity_id: "{{ lights }}"
                - conditions:
                    - condition: template
                      value_template: "{{ first_press_behavior == 'turn_on' }}"
                      alias: If first press behavior is "turn on"
                  alias: Turn On
                  sequence:
                    - action: light.turn_on
                      metadata: {}
                      data: {}
                      target:
                        entity_id: "{{ lights }}"
                - conditions:
                  - condition: template
                    value_template: "{{ first_press_behavior == 'scene' and scene_index is not none and scenes[scene_index] is defined }}"
                  alias: Scene
                  sequence:
                    - action: scene.turn_on
                      metadata: {}
                      target:
                        entity_id: "{{ scenes[scene_index] }}"
        first_button_double_press: &input_double_press
          name: Double Press
          description: Actions to perform when the button is pressed twice
          selector:
            action: {}
          default:
            - if:
                - condition: template
                  value_template: "{{ scene_index is not none and scenes[scene_index] is defined }}"
                  alias: Scene two is defined
              alias: Button is pressed twice
              then:
                - action: scene.turn_on
                  alias: Activate Scene
                  metadata: {}
                  target:
                    entity_id: "{{ scenes[scene_index] }}"
        first_button_triple_press: &input_triple_press
          name: Triple Press
          description: Actions to perform when the button is pressed three times
          selector:
            action: {}
          default:
            - if:
                - condition: template
                  value_template: "{{ scene_index is not none and scenes[scene_index] is defined }}"
                  alias: Scene three is defined
              alias: Button is pressed three times
              then:
                - action: scene.turn_on
                  alias: Activate Scene
                  metadata: {}
                  target:
                    entity_id: "{{ scenes[scene_index] }}"
        first_button_quadruple_press: &input_quadruple_press
          name: Quadruple Press
          description: Actions to perform when the button is pressed four times
          selector:
            action: {}
          default:
            - if:
                - condition: template
                  value_template: "{{ scene_index is not none and scenes[scene_index] is defined }}"
                  alias: Scene four is defined
              alias: Button is pressed four times
              then:
                - action: scene.turn_on
                  alias: Activate Scene
                  metadata: {}
                  target:
                    entity_id: "{{ scenes[scene_index] }}"
        first_button_quintuple_press: &input_quintuple_press
          name: Quintuple Press
          description: Actions to perform when the button is pressed five times
          selector:
            action: {}
          default:
            - if:
                - condition: template
                  value_template: "{{ scene_index is not none and scenes[scene_index] is defined }}"
                  alias: Scene five is defined
              alias: Button is pressed five times
              then:
                - action: scene.turn_on
                  alias: Activate Scene
                  metadata: {}
                  target:
                    entity_id: "{{ scenes[scene_index] }}"

        first_button_long_press: &input_long_press
          name: Long Press
          description: Actions to perform when the button is held
          selector:
            action: {}
          default:
            - action: light.turn_off
              metadata: {}
              data: {}
              target:
                entity_id: "{{ lights }}"
#endregion FIRST BUTTON INPUT

#region SECOND BUTTON INPUT
    second_button:
      name: Second Button
      description: Configuration for the second button on the Philips Hue Tap Switch
      input:
        second_button_lights: *input_button_lights
        second_button_allow_dimming: *input_allow_dimming
        second_button_scenes: *input_scenes

    second_button_press_actions:
      name: Second Button Press Actions
      description: Advanced configuration for actions to perform when the button is pressed, double pressed, triple pressed, etc.
      collapsed: true
      input:
        second_button_single_press: *input_single_press
        second_button_double_press: *input_double_press
        second_button_triple_press: *input_triple_press
        second_button_quadruple_press: *input_quadruple_press
        second_button_quintuple_press: *input_quintuple_press
        second_button_long_press: *input_long_press
#endregion SECOND BUTTON INPUT

#region THIRD BUTTON INPUT
    third_button:
      name: Third Button
      description: Configuration for the third button on the Philips Hue Tap Switch
      input:
        third_button_lights: *input_button_lights
        third_button_allow_dimming: *input_allow_dimming
        third_button_scenes: *input_scenes

    third_button_press_actions:
      name: Third Button Press Actions
      description: Advanced configuration for actions to perform when the button is pressed, double pressed, triple pressed, etc.
      collapsed: true
      input:
        third_button_single_press: *input_single_press
        third_button_double_press: *input_double_press
        third_button_triple_press: *input_triple_press
        third_button_quadruple_press: *input_quadruple_press
        third_button_quintuple_press: *input_quintuple_press
        third_button_long_press: *input_long_press
#endregion THIRD BUTTON INPUT

#region FOURTH BUTTON INPUT
    fourth_button:
      name: Fourth Button
      description: Configuration for the fourth button on the Philips Hue Tap Switch
      input:
        fourth_button_lights: *input_button_lights
        fourth_button_allow_dimming: *input_allow_dimming
        fourth_button_scenes: *input_scenes

    fourth_button_press_actions:
      name: Fourth Button Press Actions
      description: Advanced configuration for actions to perform when the button is pressed, double pressed, triple pressed, etc.
      collapsed: true
      input:
        fourth_button_single_press: *input_single_press
        fourth_button_double_press: *input_double_press
        fourth_button_triple_press: *input_triple_press
        fourth_button_quadruple_press: *input_quadruple_press
        fourth_button_quintuple_press: *input_quintuple_press
        fourth_button_long_press: *input_long_press
#endregion FOURTH BUTTON INPUT

#region DIAL INPUT
    dial_clockwise_actions:
      name: Dial Clockwise Actions
      description: Actions to perform when the dial is turned clockwise
      <<: &dial_actions
        selector:
          action: {}
        default:
          - action: light.turn_on
            metadata: {}
            data: 
              brightness_step: "{{ step_size * dim_scale }}"
            target:
              entity_id: "{{ dial_lights | select('is_state', 'on') | list }}"
    dial_counterclockwise_actions:
      name: Dial Counter Clockwise Actions
      description: Actions to perform when the dial is turned counter clockwise
      <<: *dial_actions
#endregion DIAL INPUT

  source_url: https://github.com/nickcwilkins/hass-blueprints/blob/main/hue/tap_dial_zha.yaml
mode: single
max_exceeded: silent

#region VARIABLES
variables:
  dim_scale: !input dim_scale
  first_press_behavior: !input first_press_behavior
  first_button_lights: !input first_button_lights
  first_button_allow_dimming: !input first_button_allow_dimming
  first_button_scenes: !input first_button_scenes

  second_button_lights: !input second_button_lights
  second_button_allow_dimming: !input second_button_allow_dimming
  second_button_scenes: !input second_button_scenes

  third_button_lights: !input third_button_lights
  third_button_allow_dimming: !input third_button_allow_dimming
  third_button_scenes: !input third_button_scenes

  fourth_button_lights: !input fourth_button_lights
  fourth_button_allow_dimming: !input fourth_button_allow_dimming
  fourth_button_scenes: !input fourth_button_scenes
#endregion VARIABLES

#region TRIGGERS
triggers:
  - trigger: event
    id: single_press
    alias: Single Press
    event_type: zha_event
    event_data:
      device_id: !input remote
      args:
        press_type: press
  - trigger: event
    id: double_press
    alias: Double Press
    event_type: zha_event
    event_data:
      device_id: !input remote
      args:
        press_type: double_press
  - trigger: event
    id: triple_press
    alias: Triple Press
    event_type: zha_event
    event_data:
      device_id: !input remote
      args:
        press_type: triple_press
  - trigger: event
    id: quadruple_press
    alias: Quadruple Press
    event_type: zha_event
    event_data:
      device_id: !input remote
      args:
        press_type: quadruple_press
  - trigger: event
    id: quintuple_press
    alias: Quintuple Press
    event_type: zha_event
    event_data:
      device_id: !input remote
      args:
        press_type: quintuple_press
  - trigger: event
    id: long_release
    alias: Long Release
    event_type: zha_event
    event_data:
      device_id: !input remote
      args:
        press_type: long_release
  - trigger: event
    id: dial_clockwise
    alias: Dial Turned Clockwise
    event_type: zha_event
    event_data:
      device_id: !input remote
      command: step_with_on_off
      params:
        step_mode: 0
  - trigger: event
    id: dial_counter_clockwise
    alias: Dial Turned Counter Clockwise
    event_type: zha_event
    event_data:
      device_id: !input remote
      command: step_with_on_off
      params:
        step_mode: 1
#endregion TRIGGERS

actions:
  - variables:
      command: >
        {{ trigger.event.data.command }}
      button: >
        {% if 'args' in trigger.event.data and trigger.event.data.args is mapping and trigger.event.data.args.button is defined %} 
          {{ trigger.event.data.args.button }}
        {% endif %}
      press_type: >
        {% if 'args' in trigger.event.data and trigger.event.data.args is mapping and trigger.event.data.args.press_type is defined %}
          {{ trigger.event.data.args.press_type }}
        {% endif %}
      lights: >
        {% if button == 'button_1' %}
          {{ first_button_lights }}
        {% elif button == 'button_2' %}
          {{ second_button_lights }}
        {% elif button == 'button_3' %}
          {{ third_button_lights }}
        {% elif button == 'button_4' %}
          {{ fourth_button_lights }}
        {% else %}
          []
        {% endif %}
      dial_lights: >
        {% set dial_lights = [] %}
        {% if first_button_allow_dimming %} 
          {% set dial_lights = first_button_lights %}
        {% endif %}
        {% if second_button_allow_dimming %}
          {% set dial_lights = dial_lights + second_button_lights %}
        {% endif %}
        {% if third_button_allow_dimming %}
          {% set dial_lights = dial_lights + third_button_lights %}
        {% endif %}
        {% if fourth_button_allow_dimming %}
          {% set dial_lights = dial_lights + fourth_button_lights %}
        {% endif %}
        {{ dial_lights }}
      scenes: >
        {% if button == 'button_1' %}
          {{ first_button_scenes }}
        {% elif button == 'button_2' %}
          {{ second_button_scenes }}
        {% elif button == 'button_3' %}
          {{ third_button_scenes }}
        {% elif button == 'button_4' %}
          {{ fourth_button_scenes }}
        {% else %}
          []
        {% endif %}
      scene_index: >
        {% set scene_index = None %}
        {% set scene_offset = 0 if first_press_behavior == 'scene' else -1 %}

        {% if press_type == 'press' %}
          {{ 0 + scene_offset }}
        {% elif press_type == 'double_press' %}
          {{ 1 + scene_offset }}
        {% elif press_type == 'triple_press' %}
          {{ 2 + scene_offset }}
        {% elif press_type == 'quadruple_press' %}
          {{ 3 + scene_offset }}
        {% elif press_type == 'quintuple_press' %}
          {{ 4 + scene_offset }}
        {% else %}
          None
        {% endif %}
        {{ scene_index }}
      step_size: >
        {% if trigger.id == 'dial_clockwise' %}
          {{ trigger.event.data.params.step_size }}
        {% elif trigger.id == 'dial_counter_clockwise' %}
          {{ -trigger.event.data.params.step_size }}
        {% else %}
          0
        {% endif %}
  - choose:
#region SINGLE PRESS
      - conditions:
        - condition: trigger
          id: single_press
        alias: Single Press
        sequence:
          - choose:
            - conditions:
              - condition: template
                value_template: "{{ button == 'button_1' }}"
              alias: First Button Single Press
              sequence: !input first_button_single_press
            - conditions:
              - condition: template
                value_template: "{{ button == 'button_2' }}"
              alias: Second Button Single Press
              sequence: !input second_button_single_press
            - conditions:
              - condition: template
                value_template: "{{ button == 'button_3' }}"
              alias: Third Button Single Press
              sequence: !input third_button_single_press
            - conditions:
              - condition: template
                value_template: "{{ button == 'button_4' }}"
              alias: Fourth Button Single Press
              sequence: !input fourth_button_single_press
#endregion SINGLE PRESS

#region DOUBLE PRESS
      - conditions:
        - condition: trigger
          id: double_press
        alias: Double Press
        sequence:
          - choose:
            - conditions:
              - condition: template
                value_template: "{{ button == 'button_1' }}"
              alias: First Button Double Press
              sequence: !input first_button_double_press
            - conditions:
              - condition: template
                value_template: "{{ button == 'button_2' }}"
              alias: Second Button Double Press
              sequence: !input second_button_double_press
            - conditions:
              - condition: template
                value_template: "{{ button == 'button_3' }}"
              alias: Third Button Double Press
              sequence: !input third_button_double_press
            - conditions:
              - condition: template
                value_template: "{{ button == 'button_4' }}"
              alias: Fourth Button Double Press
              sequence: !input fourth_button_double_press
#endregion DOUBLE PRESS

#region TRIPLE PRESS
      - conditions:
        - condition: trigger
          id: triple_press
        alias: Triple Press
        sequence:
          - choose:
            - conditions:
              - condition: template
                value_template: "{{ button == 'button_1' }}"
              alias: First Button Triple Press
              sequence: !input first_button_triple_press
            - conditions:
              - condition: template
                value_template: "{{ button == 'button_2' }}"
              alias: Second Button Triple Press
              sequence: !input second_button_triple_press
            - conditions:
              - condition: template
                value_template: "{{ button == 'button_3' }}"
              alias: Third Button Triple Press
              sequence: !input third_button_triple_press
            - conditions:
              - condition: template
                value_template: "{{ button == 'button_4' }}"
              alias: Fourth Button Triple Press
              sequence: !input fourth_button_triple_press
#endregion TRIPLE PRESS

#region QUADRUPLE PRESS
      - conditions:
        - condition: trigger
          id: quadruple_press
        alias: Quadruple Press
        sequence:
          - choose:
            - conditions:
              - condition: template
                value_template: "{{ button == 'button_1' }}"
              alias: First Button Quadruple Press
              sequence: !input first_button_quadruple_press
            - conditions:
              - condition: template
                value_template: "{{ button == 'button_2' }}"
              alias: Second Button Quadruple Press
              sequence: !input second_button_quadruple_press
            - conditions:
              - condition: template
                value_template: "{{ button == 'button_3' }}"
              alias: Third Button Quadruple Press
              sequence: !input third_button_quadruple_press
            - conditions:
              - condition: template
                value_template: "{{ button == 'button_4' }}"
              alias: Fourth Button Quadruple Press
              sequence: !input fourth_button_quadruple_press
#endregion QUADRUPLE PRESS

#region QUINTUPLE PRESS
      - conditions:
        - condition: trigger
          id: quintuple_press
        alias: Quintuple Press
        sequence:
          - choose:
            - conditions:
              - condition: template
                value_template: "{{ button == 'button_1' }}"
              alias: First Button Quintuple Press
              sequence: !input first_button_quintuple_press
            - conditions:
              - condition: template
                value_template: "{{ button == 'button_2' }}"
              alias: Second Button Quintuple Press
              sequence: !input second_button_quintuple_press
            - conditions:
              - condition: template
                value_template: "{{ button == 'button_3' }}"
              alias: Third Button Quintuple Press
              sequence: !input third_button_quintuple_press
            - conditions:
              - condition: template
                value_template: "{{ button == 'button_4' }}"
              alias: Fourth Button Quintuple Press
              sequence: !input fourth_button_quintuple_press
#endregion QUINTUPLE PRESS

#region LONG PRESS
      - conditions:
        - condition: trigger
          id: long_release
        alias: Long Press
        sequence:
          - choose:
            - conditions:
              - condition: template
                value_template: "{{ button == 'button_1' }}"
              alias: First Button Long Press
              sequence: !input first_button_long_press
            - conditions:
              - condition: template
                value_template: "{{ button == 'button_2' }}"
              alias: Second Button Long Press
              sequence: !input second_button_long_press
            - conditions:
              - condition: template
                value_template: "{{ button == 'button_3' }}"
              alias: Third Button Long Press
              sequence: !input third_button_long_press
            - conditions:
              - condition: template
                value_template: "{{ button == 'button_4' }}"
              alias: Fourth Button Long Press
              sequence: !input fourth_button_long_press
#endregion LONG PRESS

# region DIAL CLOCKWISE
      - conditions:
        - condition: trigger
          id: dial_clockwise
        sequence: !input dial_clockwise_actions
# endregion DIAL CLOCKWISE

# region DIAL CCW
      - conditions:
        - condition: trigger
          id: dial_counter_clockwise
        sequence: !input dial_counterclockwise_actions
# endregion DIAL CCW
